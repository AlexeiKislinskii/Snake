#include <clocale>
#include <conio.h>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <windows.h>
#include <math.h>

char* CreateArray( int x );									//функция для создания одномерного массива любой размерности
void FreeArray( char* field );								//деструктор для функции выше
void game();												//порядок действий в игре
void gotoXY( int line, int column );							//функция-обертка для перенесения курсора в нужную точку экрана
struct SnakeElement											//элементарная частица змеи
{
  char pixel;												//содержит символ элемента(текстуру)
  SnakeElement *next;										//указатель на следующий эллемент
  int x;													//самодельный индекс(отличительный ID) каждого узла списка

};
struct Coord												//структура для удобпого описывания координат
{
  int x, y;
};
class SnakeList												//односторонне связанный список частей змеи(собственно говоря динамический массив данных хранящий змею)
{
private:
  SnakeElement * Head, *Tail;								//указательи на хвост и голову змеи
public:
  SnakeList();
  ~SnakeList();
  void Add( int x, char pixel );								//функция удлиннения змеи(добовление хвоста списка)
  void DeleteHead();										//функция укарачивания змеи(удаление головы змеи)
  int getHeadX() { return Head->x; }
  int getTailX() { return Tail->x; }
  char getHeadPixel() { return Head->pixel; }
  char getTailPixel() { return Tail->pixel; }
};
class Field													//класс содержащий информаци об основном поле и все методы которые с ним работают
{
private:
  unsigned int x, y;										//размеры игрового массива(не игрового поля!а полный размер массива, игровое поле меньше на 2 по х и по у(у массива есть еще и границы))
  SnakeList snake;										//экземпляр класса змея
  char* map;												//указатель на начало массива с полем
  unsigned int Direction, lenth, score;						//переменные описывающие направление(1-вверх,2-влево,3-вниз,4-вправо), длинну змеи и счет игры соответственно											
  bool Algorithm, player;									//логические переменные применение алгоритма для решение определенных ситуаций ИИ и переменная переключения программы с режима реальный игрок на компьютер
public:
  Field();												//пустой конструктор
  Field( int x_init, int y_init );							//конструктор позволяющий создать поле разных размеров
  ~Field();												//деструктор
  void Init();											//функция создания и заполненния массива стартовыми данными
  void Print( int init_x );									//функция вывода поля или отдельных его частей на экран
  void Input();											//область программы где пользователь задает все стартовые значения
  void SnakeCreate();										//создание двух первых кусочков змеи при старте
  void SnakePlaceOnField();								//слияние 2 массивов, змеи и поля
  int SnakeMove();										//функция смены текстур в зависимости от направления движения, захват ввода и смена направления в зависимости от ввода, содержит порядок действий при поедании и движении
  int Scan( int Direction, int input );						//функция анализирует что расположено в определенном направлении от определеннойточки
  int Food();												//функция рандомного расположении еды на поле
  int PerfectPlayer( int, int );								//ИИ игры, при вызове возвращает направление движения к еде, что позволяет компьютеру играть в игру самому
  Coord IndexToXY( int );									//функция для преобразования индекса одномерного массива в двумерный(практически в игре одномерный массив, пользователь же видит двухмерный) 
  int XYToIndex( int, int );									//функция обратная предыдущей
  void PrintScore();										//функциядля вывода счета на экран
  void GameEnd( int );										//функция вывода результата игры и запроса на ее повтор
  double Distance( Coord, Coord );							//функция для ИИ игры, расчитывает расстояние между 2 точками
  double Distance( int, int );								//перегруженный экземпляр предыдущей функции
};